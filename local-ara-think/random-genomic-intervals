#!/usr/bin/env python
import signal
signal.signal(signal.SIGPIPE, signal.SIG_DFL)

import sys
import random
import argparse
from my import *


parser = argparse.ArgumentParser(description=sys.argv[0])
parser.add_argument('-v', '--verbose', action='append_const', const=1, default=[], dest='verbose')
parser.add_argument('-c', '--stop-count', action='store', type=int,
                    default=1000, dest='stop_count')
parser.add_argument('input', action='store', default='-', nargs='?')
args = parser.parse_args()
set_log_level(len(args.verbose))

if args.input == '-':
    in_file = sys.stdin
else:
    in_file = open(args.input)

contig_offsets = list()
contig_lengths = list()
contig_names = list()
total_length = 0
for line in in_file:
    line = line.strip().split('\t')
    contig_offsets.append(total_length)
    contig_lengths.append(int(line[1]))
    contig_names.append(line[0])
    total_length += int(line[1])
in_file.close()

cnt = 0
while cnt < args.stop_count:
    x = int(random.random() * total_length)
    y = x + 20
    k = 0
    while k < len(contig_names) and x >= contig_offsets[k] + contig_lengths[k]:
        k += 1
    if k >= len(contig_names):
        note('sample outside of sequence space')
        continue
    if y >= contig_offsets[k] + contig_lengths[k]:
        note('sample close to chromosome end')
        continue
    print '\t'.join([contig_names[k],
                     str(x - contig_offsets[k]), str(y - contig_offsets[k])])
    cnt += 1
